version: '3.8'
services:
  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_MESSAGE_MAX_BYTES: 10485760
      KAFKA_REPLICA_FETCH_MAX_BYTES: 10485760
    ports:
      - "29092:29092"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: violations_db
    environment:
      POSTGRES_DB: violations_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d violations_db"]
      interval: 10s
      timeout: 5s
      retries: 5
  # Frame Reader Service
  frame_reader:
    build:
      context: .
      dockerfile: frame_reader/Dockerfile
    container_name: frame_reader
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/violations_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - ./frame_reader/video:/app/video        # Video files for processing
    networks:
      - app_network
    restart: unless-stopped
  # Detection Service
  detection_service:
    build:
      context: .
      dockerfile: detection_service/Dockerfile
    container_name: detection_service
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/violations_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - ./violations:/app/violations            # Directory to save violation images
    networks:
      - app_network
    restart: unless-stopped
  # Streaming Service
  streaming_service:
    build:
      context: .
      dockerfile: streaming_service/Dockerfile
    volumes:
      - ./frame_reader/video:/app/video
    container_name: streaming_service
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/violations_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    ports:
      - "8001:8001"
      - "8000:8000"  # WebSocket port
    networks:
      - app_network
    restart: unless-stopped
volumes:
  postgres_data:
networks:
  app_network:
    driver: bridge
